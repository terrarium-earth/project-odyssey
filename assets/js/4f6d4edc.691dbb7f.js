"use strict";(self.webpackChunkterrarium_docs=self.webpackChunkterrarium_docs||[]).push([[5286],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>f});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function m(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=t.createContext({}),c=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):m(m({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(o.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(a),p=i,f=s["".concat(o,".").concat(p)]||s[p]||u[p]||r;return a?t.createElement(f,m(m({ref:n},d),{},{components:a})):t.createElement(f,m({ref:n},d))}));function f(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,m=new Array(r);m[0]=p;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[s]="string"==typeof e?e:i,m[1]=l;for(var c=2;c<r;c++)m[c]=a[c];return t.createElement.apply(null,m)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},483:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>m,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(7462),i=(a(7294),a(3905));const r={displayed_sidebar:"cadmus"},m="Admin Claim Commands",l={unversionedId:"cadmus/admin-claims/commands",id:"cadmus/admin-claims/commands",title:"Admin Claim Commands",description:"Create Command",source:"@site/docs/cadmus/admin-claims/commands.md",sourceDirName:"cadmus/admin-claims",slug:"/cadmus/admin-claims/commands",permalink:"/docs/cadmus/admin-claims/commands",draft:!1,tags:[],version:"current",frontMatter:{displayed_sidebar:"cadmus"},sidebar:"cadmus",previous:{title:"Admin Claims",permalink:"/docs/cadmus/admin-claims/"},next:{title:"Admin Flag Commands",permalink:"/docs/cadmus/admin-claims/flags"}},o={},c=[{value:"Create Command",id:"create-command",level:2},{value:"Remove Command",id:"remove-command",level:2},{value:"Claim Command",id:"claim-command",level:2},{value:"Unclaim Command",id:"unclaim-command",level:2}],d={toc:c},s="wrapper";function u(e){let{components:n,...a}=e;return(0,i.kt)(s,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"admin-claim-commands"},"Admin Claim Commands"),(0,i.kt)("h2",{id:"create-command"},"Create Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/cadmus adminclaims create <id>\n")),(0,i.kt)("p",null,"Creates an admin claim group"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the admin claim. this is referenced when\nadding and removing chunks from the admin claim. This also must be\nunique from other admin claims.")),(0,i.kt)("h2",{id:"remove-command"},"Remove Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/cadmus adminclaims remove <id>\n")),(0,i.kt)("p",null,"Deletes an admin claim group and its flags"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the admin claim.")),(0,i.kt)("h2",{id:"claim-command"},"Claim Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/cadmus adminclaims claim <id> <pos> <chunkload>\n")),(0,i.kt)("p",null,"Claims a chunk of land as an admin claim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the admin claim."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pos"),": The chunk position to claim. This parameter is ",(0,i.kt)("strong",{parentName:"li"},"optional"),".\nIf not specified, it will claim the player's current position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chunkload"),": Whether the claim is chunk loaded or not. This parameter is ",(0,i.kt)("strong",{parentName:"li"},"optional"),".\nIf not specified, the chunk will not be loaded.")),(0,i.kt)("h2",{id:"unclaim-command"},"Unclaim Command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/cadmus adminclaims unclaim <id> <pos>\n")),(0,i.kt)("p",null,"Unclaims a chunk of land as an admin claim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The identifier for the admin claim."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pos"),": The chunk position to unclaim. This parameter is ",(0,i.kt)("strong",{parentName:"li"},"optional"),".\nIf not specified, it will unclaim the player's current position.")))}u.isMDXComponent=!0}}]);